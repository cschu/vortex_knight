params {

	output_dir = "nevermore_out"

	/*
	How are the results stored in the output folder?
	By default, the files are symlinked from the work dir, so ensure to dereference
	the symlinks before removing the work dir.
	For low volume results, change to "copy" or, if the file system supports it, to "link".
	(EMBL /scratch does not support "link")
	*/
	publish_mode = "copy"

	/*
	Set the path to a kraken2 database for host-removal
	*/
	remove_host_kraken2_db = "/g/scb/zeller/schudoma/kraken2/hg38_silva_genome"
	kraken2_min_hit_groups = 10

	/*
	Set the path to a reference db
	*/
    reference = "/scratch/schudoma/igc.ngm/0.0/data/IGC.fna"

    // If primer sequences are supplied via --primer
    // primer + adapter removal is a two-step process:
    // 1. gentle quality trimming (< phred 3) + remove left primer on 5'-R1 and potentially on 3'-R2 (rc)
    // 2. remove right primer on 5'-R2 and potentially on 3'-R1 (rc)

    // Primer removal is highly dataset-specific, you might have to play with the settings below:
    // also refer to: https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbduk-guide/
    // cu=t : allow degenerate primer sequences
    // qtrim=rl trimq=3 : gentle quality trimming (< phred 3) on both sides
    // ktrim=(r|l) : clip adapters from right xor left end -- DO NOT MODIFY.
    // restrictleft|restrictright : only take into account the first / last N bases for adapter clipping
    // k=9 hdist=1: adapter/primer k-mers of length 9 have to match with at most one mismatch
    // mink=1: at the ends of reads, perfect (mismatch=0) adapter/primer k-mer matches of length 1 are allowed (similar to cutadapt)
	// -- to allow mismatches, set hdist2 to a positive, non-zero integer

    p5_primer_params = "cu=t qtrim=rl ktrim=l trimq=3 k=9 mink=1 hdist=1 restrictleft=50"
    p3_primer_params = "cu=t ktrim=r k=9 mink=1 hdist=1 restrictright=50"

	qc_params_shotgun = "qtrim=rl trimq=3 maq=25 ktrim=r k=23 mink=11 hdist=1 ftm=5 entropy=0.5 entropywindow=50 entropyk=5 tpe tbo"

	// only keep reads of at least length = qc_minlen
	qc_minlen = 45
    // qc_minlen = 100 // -> for 16S in amplicon_mode
}

/* section below needs to be adjusted to local cluster */
executor {
	$slurm {
		queueSize = 30
	}
	$local {
		cpus = 1
		memory = '4 GB'
	}
}

process {
	cache = "lenient"
	withName: fastqc {
		container = "oras://ghcr.io/cschu/nevermore:latest"
		executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {4.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: multiqc {
		container = "oras://ghcr.io/cschu/nevermore:latest"
		executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {4.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: bam2fq {
		container = "oras://ghcr.io/cschu/nevermore:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : 16.GB * task.attempt}
		memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		time = '7d'
		maxRetries = 3
	}
	withName: fq2bam {
		container = "oras://ghcr.io/cschu/nevermore:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: flagstats {
		container = "oras://ghcr.io/cschu/nevermore:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		//memory = {8.GB * task.attempt}
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		memory = {2.GB * task.attempt} 
		time = '7d'
		maxRetries = 3
	}
	withLabel: kraken2 {
		container = "oras://ghcr.io/cschu/nevermore:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {64.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
    withLabel: bbduk {
		container = "oras://ghcr.io/cschu/nevermore:latest"
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 4
        memory = {8.GB * task.attempt}
        time = '2h'
        maxRetries = 3
    }
    withName: qc_bbmerge {
		container = "oras://ghcr.io/cschu/nevermore:latest"
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 4
        memory = {16.GB * task.attempt}
        time = '2h'
        maxRetries = 3
    }
    withName: concat_singles {
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 1
        memory = '2.GB'
        time = '8h'
        maxRetries = 3
    }
	withLabel: align {
		container = "oras://ghcr.io/cschu/nevermore:latest"
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 8
        memory = {16.GB * task.attempt}
        time = '7d'
        maxRetries = 3
    }
    withLabel: samtools {
		container = "oras://ghcr.io/cschu/nevermore:latest"
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 8
        memory = {16.GB * task.attempt}
        time = '8h'
        maxRetries = 3
    }
}

singularity {
	enabled = true
	autoMounts = true
}
