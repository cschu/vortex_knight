params {

	/*
	How are the results stored in the output folder?
	By default, the files are symlinked from the work dir, so ensure to dereference
	the symlinks before removing the work dir.
	For low volume results, change to "copy" or, if the file system supports it, to "link".
	(EMBL /scratch does not support "link")
	*/
	publish_mode = "symlink"

	/*
	Set the path to a pathseq database.
	*/
	pathseq_database = "/g/scb/zeller/fspringe/Database/PathSeq_Legacy"
	// pathseq_database = "/scratch/schudoma/vknight/PathSeq_Legacy"
	pathseq_min_clipped_read_length = 31

	/*
	Set the path to a mOTUs database if you have a custom mOTUs installation.
	Setting this will automatically activate usage of the -db command line parameter.
	*/
	//motus_database = "/g/scb/zeller/fspringe/Software/mOTUs/motus/share/motus-2.6.0/db_mOTU"
	motus2_min_length = 30 // -l
	motus2_n_marker_genes = 1 // -g

	/*
	Set the path to a kraken2 database.
	*/
	kraken_database = "/g/scb/zeller/jawirbel/total_RNAseq/databases/kraken2_standard"

	/*
	Set the path to a mapseq binary.
	*/
	mapseq_bin = "/g/scb/zeller/fspringe/Software/mapseq-1.2.6-linux/mapseq"


	/*
	Set the path to the collate script
	*/
	collate_script = "/scratch/schudoma/vknight/scripts/ExtractProfiledCounts_210823.R"

}

/* section below needs to be adjusted to local cluster */
executor {
	$slurm {
		queueSize = 30
	}
	$local {
		cpus = 1
		memory = '4 GB'
	}
}

process {
	withName: collate_data {
		conda = "/g/scb/bork/schudoma/miniconda3/envs/vknight_analysis"
		executor = "local"
	}
	withName: bam2fq {
		module = "SAMtools/1.10-GCC-8.3.0"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : 16.GB * task.attempt}
		memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		time = '7d'
		maxRetries = 3
	}
	withName: fq2bam {
		module = ["GATK", "Java/1.8.0_221"]
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: count_reads {
		module = "SAMtools/1.10-GCC-8.3.0"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		//memory = {8.GB * task.attempt}
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		memory = {2.GB * task.attempt} 
		time = '7d'
		maxRetries = 3
	}
	withName: kraken2 {
		//module = "BLAST+/2.9.0-foss-2018b"
		//conda = "bioconda::kraken2"
		// kraken2 needs to somehow get dependencies from conda-forge -> todo: make env.yml
		conda = "/g/scb/bork/schudoma/miniconda3/envs/kraken2_weird"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {64.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: mtags_extract {
		conda = "/g/scb/zeller/fspringe/Software/env/mtags/"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 24
		//memory = {64.GB * task.attempt}
		memory = {4.GB * task.attempt}
		time = {reads.size() < 10.GB ? '24h' : '7d'}
		maxRetries = 3
	}
	withName: mtags_annotate {
		conda = "/g/scb/zeller/fspringe/Software/env/mtags/"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 24
		memory = {2.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: mtags_merge {
		conda = "/g/scb/zeller/fspringe/Software/env/mtags/"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3
	}
	withName: motus2 {
		conda = "/g/scb/zeller/fspringe/Software/mOTUs/motus"
		// conda = "bioconda::motus==2.6.0"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 6
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: pathseq {
		module = ["GATK", "Java/1.8.0_221"]
		executor = "slurm"
		errorStrategy = {task.attempt <= 8 ? "retry" : "ignore"}
		cpus = 1
		memory = {256.GB * task.attempt}
		time = '7d'
		maxRetries = 8
	}
	withName: collate_mapseq_tables {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3	
	}
	withName: mapseq {
		conda = "/g/scb/zeller/fspringe/Software/mTAGs/"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}	
		cpus = 8 
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3	
	}
}
