params {

	output_dir = "vknight_out"

	/*
	How are the results stored in the output folder?
	By default, the files are symlinked from the work dir, so ensure to dereference
	the symlinks before removing the work dir.
	For low volume results, change to "copy" or, if the file system supports it, to "link".
	(EMBL /scratch does not support "link")
	*/
	publish_mode = "symlink"

	/*
	Set the path to a pathseq database.
	*/
	pathseq_database = "/g/scb/zeller/fspringe/Database/PathSeq_Legacy"
	// pathseq_database = "/scratch/schudoma/vknight/PathSeq_Legacy"
	pathseq_min_clipped_read_length = 31

	/*
	Set the path to a mOTUs database if you have a custom mOTUs installation.
	Setting this will automatically activate usage of the -db command line parameter.
	*/
	motus_database = "/g/scb/zeller/fspringe/Software/mOTUs/motus/share/motus-2.6.0/db_mOTU"
	motus2_min_length = 30 // -l
	motus2_n_marker_genes = 1 // -g

	/*
	Set the path to a kraken2 database for kraken2-profiling
	*/
	kraken_database = "/g/scb/zeller/jawirbel/total_RNAseq/databases/kraken2_standard"
    kraken2_min_hit_groups = 10

	/*
	Set the path to a mapseq binary.
	*/
	mapseq_bin = "mapseq" // /g/scb/zeller/fspringe/Software/mapseq-1.2.6-linux/mapseq"


	/*
	Set the path to the collate script
	*/
	//collate_script = "/scratch/schudoma/vknight/scripts/ExtractProfiledCounts_210823.R"
	collate_script = null

	/*
	Set the path to a kraken2 database for host-removal
	*/
	remove_host_kraken2_db = "/g/scb/zeller/schudoma/kraken2/hg38_silva_genome"

	/* 
		bbduk qc parameters 
		s. https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbduk-guide/
		qtrim=rl trimq=3 : gentle quality trimming (only discard bases < phred 3; phred 2 = junk marker) on either side (rl) of the read
		maq=25 : discard reads below average quality of pred 25
		minlen=45 : discard reads < 45bp
		ref=?? ktrim=r k=23 mink=11 hdist=1 tpe tbo : right-side k-mer based adapter clipping with 1 mismatch allowed, try overlap-detection (tbo), and trim pairs to same length (tpe) upon adapter detection
		ftm=5 : get rid off (n*5)+1st base (last sequencing cycle illumina garbage)
		entropy=0.5 entropywindow=50 entropyk=5 : discard low complexity sequences
	*/

	qc_params = "qtrim=rl trimq=3 maq=25 minlen=45 ktrim=r k=23 mink=11 hdist=1 ftm=5 entropy=0.5 entropywindow=50 entropyk=5 tpe tbo"
	
}

/* section below needs to be adjusted to local cluster */
executor {
	$slurm {
		queueSize = 30
	}
	$local {
		cpus = 1
		memory = '4 GB'
	}
}

process {
	cache = "lenient"
	withName: collate_data {
		//conda = params.env_path + "/vknight_analysis"
		//conda = "/g/scb/bork/schudoma/miniconda3/envs/vknight_analysis"
		executor = "local"
	}
	withName: count_reads {
		executor = "local"
	}
	withName: fastqc {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {4.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: multiqc {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {4.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: bam2fq {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : 16.GB * task.attempt}
		memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		time = '7d'
		maxRetries = 3
	}
	withName: fq2bam {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: flagstats {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		//memory = {8.GB * task.attempt}
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		memory = {2.GB * task.attempt} 
		time = '7d'
		maxRetries = 3
	}
	withName: remove_host_kraken2 {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {64.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: kraken2 {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {64.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: mtags_extract {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 24
		//memory = {64.GB * task.attempt}
		memory = {4.GB * task.attempt}
		time = {reads.size() < 10.GB ? '24h' : '7d'}
		maxRetries = 3
	}
	withName: mtags_annotate {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 24
		memory = {2.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: mtags_merge {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3
	}
	withName: motus2 {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 6
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: pathseq {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 8 ? "retry" : "ignore"}
		cpus = 1
		memory = {256.GB * task.attempt}
		time = '7d'
		maxRetries = 8
	}
	withName: collate_mapseq_tables {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3	
	}
	withName: mapseq {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}	
		cpus = 8 
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3	
	}
    withName: qc_bbduk {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 4
        memory = {8.GB * task.attempt}
        time = '2h'
        maxRetries = 3
    }
    withName: qc_bbmerge {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 4
        memory = {16.GB * task.attempt}
        time = '2h'
        maxRetries = 3
    }
    withName: concat_singles {
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 1
        memory = '2.GB'
        time = '8h'
        maxRetries = 3
    }
}

singularity {
	enabled = true
	autoMounts = true
}
