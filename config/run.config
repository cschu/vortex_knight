params {

	output_dir = "vknight_out"

	/*
	How are the results stored in the output folder?
	By default, the files are symlinked from the work dir, so ensure to dereference
	the symlinks before removing the work dir.
	For low volume results, change to "copy" or, if the file system supports it, to "link".
	(EMBL /scratch does not support "link")
	*/
	publish_mode = "symlink"

	/*
	Set the paths to pathseq database files.
	*/
	// pathseq_database = "/g/scb/zeller/fspringe/Database/PathSeq_Legacy"
	pathseq_database = "/g/scb/zeller/fspringe/Database/PathSeq_Dohlman"
	pathseq_db_filter_bwa_image = "/g/scb/zeller/fspringe/Database/PathSeq_Dohlman/pathseq_host.fa.img"
	pathseq_db_kmer_file = "/g/scb/zeller/fspringe/Database/PathSeq_Dohlman/pathseq_host.bfi"
	pathseq_db_microbe_fasta = "/g/scb/zeller/fspringe/Database/PathSeq_Dohlman/pathseq_microbe.fa"
	pathseq_db_microbe_bwa_image = "/g/scb/zeller/fspringe/Database/PathSeq_Dohlman/pathseq_microbe.fa.img"
	pathseq_db_taxonomy_file = "/g/scb/zeller/fspringe/Database/PathSeq_Dohlman/pathseq_taxonomy.db"

	/* Set the minimum readlength for pathseq to consider */
	pathseq_min_clipped_read_length = 31

	/*
	Set the path to a mOTUs database if you have a custom mOTUs installation.
	Setting this will automatically activate usage of the -db command line parameter.
	*/
	motus_database = "/g/scb/zeller/fspringe/Software/mOTUs/motus/share/motus-2.6.0/db_mOTU"
	motus2_database = "/g/scb/zeller/fspringe/Software/mOTUs/motus/share/motus-2.6.0/db_mOTU"
	motus2_min_length = 30 // -l
	motus2_n_marker_genes = 1 // -g
	motus2_tax_level = "genus" // -k

	read_counter_database = "/g/scb/zeller/fspringe/Database/GTDB/all_genes.faa"
	read_counter_min_length = 75
	read_counter_count_mode = "-y insert.raw_counts"  // "-y insert.scaled_counts" is default

	/*
	Set the path to a kraken2 database for kraken2-profiling
	*/
	kraken_database = "/g/scb/zeller/jawirbel/total_RNAseq/databases/kraken2_standard"
	kraken2_min_hit_groups = 10

	/*
	Set the path to a mapseq binary.
	*/
	mapseq_bin = "mapseq" // /g/scb/zeller/fspringe/Software/mapseq-1.2.6-linux/mapseq"

	/*
	Set the path to a mapseq database
	ATT: The path must be a directory containing exactly 1 .fna and 1 .tax file
	(other files not ending in .tax/.fna are fine)
	*/
	mapseq_db = "/g/scb/zeller/schudoma/mapseq_db/ssu_r89"


	GTDB_markers = "/g/scb/zeller/fspringe/Database/GTDB/GTDB_marker_gene_lengths.tsv"

	/*
	Set the path to the collate script
	*/
	//collate_script = "/scratch/schudoma/vknight/scripts/ExtractProfiledCounts_210823.R"
	collate_script = null

	/*
	Set the path to a kraken2 database for host-removal
	*/
	remove_host_kraken2_db = "/g/scb/zeller/schudoma/kraken2/hg38_silva_genome"

	/*
		bbduk qc parameters
		s. https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbduk-guide/
		qtrim=rl trimq=3 : gentle quality trimming (only discard bases < phred 3; phred 2 = junk marker) on either side (rl) of the read
		maq=25 : discard reads below average quality of pred 25
		ref=?? ktrim=r k=23 mink=11 hdist=1 tpe tbo : right-side k-mer based adapter clipping with 1 mismatch allowed, try overlap-detection (tbo), and trim pairs to same length (tpe) upon adapter detection
		ftm=5 : get rid off (n*5)+1st base (last sequencing cycle illumina garbage)
		entropy=0.5 entropywindow=50 entropyk=5 : discard low complexity sequences
	*/

	qc_params_shotgun = "qtrim=rl trimq=3 maq=25 ktrim=r k=23 mink=11 hdist=1 ftm=5 entropy=0.5 entropywindow=50 entropyk=5 tpe tbo"

	/ * EXPERIMENTAL */
	qc_params_amplicon_primers = "qtrim=rl trimq=3 ktrim=l k=14 mink=1 hdist=1 cu=t"
	qc_params_amplicon = "qtrim=rl trimq=3 ktrim=l k=23 mink=1 hdist=1 tpe tbo cu=t"
	/ * \EXPERIMENTAL */

	/* BBDUK LENGTH FILTER */
	// only keep reads of at least length = qc_minlen
	//qc_minlen = 45    // NGLess functional profiling
	//qc_minlen = 100	// 16S gaga2
	qc_minlen = 50

	/* STEPWISE 16S AMPLICON PRIMER REMOVAL */
	// If only primer lengths are supplied, figaro/dada2 will take care of primer removal.
	// Otherwise, if primer sequences are supplied,
	// primer + adapter removal is a two-step process:
	// 1. gentle quality trimming (< phred 3) + remove left primer on 5'-R1 and potentially on 3'-R2 (rc)
	// 2. remove right primer on 5'-R2 and potentially on 3'-R1 (rc)

	// Primer removal is highly dataset-specific, you might have to play with the settings below:
	// also refer to: https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbduk-guide/
	// cu=t : allow degenerate primer sequences
	// qtrim=rl trimq=3 : gentle quality trimming (< phred 3) on both sides
	// ktrim=(r|l) : clip adapters from right xor left end -- DO NOT MODIFY.
	// restrictleft|restrictright : only take into account the first / last N bases for adapter clipping
	// k=9 hdist=1: adapter/primer k-mers of length 9 have to match with at most one mismatch
	// mink=1: at the ends of reads, perfect (mismatch=0) adapter/primer k-mer matches of length 1 are allowed (similar to cutadapt)
	// -- to allow mismatches, set hdist2 to a positive, non-zero integer

	p5_primer_params = "cu=t qtrim=rl ktrim=l trimq=3 k=9 mink=1 hdist=1 restrictleft=50"
	p3_primer_params = "cu=t ktrim=r k=9 mink=1 hdist=1 restrictright=50"
}


/* section below needs to be adjusted to local cluster */
executor {
	$slurm {
		queueSize = 30
	}
	$local {
		cpus = 1
		memory = '4 GB'
	}
}

process {
	cache = "lenient"
	withName: collate_data {
		//conda = params.env_path + "/vknight_analysis"
		//conda = "/g/scb/bork/schudoma/miniconda3/envs/vknight_analysis"
		executor = "local"
	}
	withName: count_reads {
		executor = "local"
	}
	withName: fastqc {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {4.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: multiqc {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {4.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: bam2fq {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : 16.GB * task.attempt}
		memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		time = '7d'
		maxRetries = 3
	}
	withName: fq2bam {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {32.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: flagstats {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		//memory = {8.GB * task.attempt}
		//memory = {bam.size() < 10.GB ? 8.GB * task.attempt : (bam.size() < 30.GB ? 16.GB * task.attempt : 32.GB * task.attempt)}
		memory = {2.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: remove_host_kraken2 {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {64.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: kraken2 {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {64.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: mtags_extract {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 24
		memory = {64.GB * task.attempt}
		// memory = {4.GB * task.attempt}
		time = {reads.size() < 10.GB ? '24h' : '7d'}
		maxRetries = 3
	}
	withName: mtags_annotate {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 24
		memory = {64.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: mtags_merge {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3
	}
	withName: motus2 {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 6
		memory = {16.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: pathseq {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 8 ? "retry" : "ignore"}
		cpus = 1
		memory = {256.GB * task.attempt}
		time = '7d'
		maxRetries = 8
	}
	withName: collate_mapseq_tables {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3
	}
	withLabel: mapseq {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 16
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withLabel: bbduk {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 4
		memory = {8.GB * task.attempt}
		time = '2h'
		maxRetries = 3
	}
	withName: qc_bbmerge {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 4
		memory = {16.GB * task.attempt}
		time = '2h'
		maxRetries = 3
	}
	withName: concat_singles {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = '2.GB'
		time = '8h'
		maxRetries = 3
	}
	withName: read_counter {
		container = "oras://ghcr.io/cschu/vortex_knight:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 4
		memory = {128.GB * task.attempt}
		time = '8h'
		maxRetries = 3
	}
	withName: collate_results {
		container = "oras://ghcr.io/cschu/vortex_knight@sha256:f5a6f620a1051bde01b1a78b7e3e7ce55f285d1e231ca8e59f19d01475512236"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {16.GB * task.attempt}
		time = {8.h * task.attempt}
		maxRetries = 3
	}
}

singularity {
	enabled = true
	autoMounts = true
}
